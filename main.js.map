{"version":3,"sources":["./src/app/labels/labels.component.ts","./src/app/labels/labels.component.html","./src/app/simulator/simulator.component.ts","./src/app/simulator/simulator.component.html","./src/app/uploader/uploader.component.ts","./src/app/uploader/uploader.component.html","./src/app/shared/select-line.directive.ts","./src/environments/environment.ts","./src/app/shared/nz.module.ts","./src/app/shared/numeral.pipe.ts","./src/app/shared/tab-support.directive.ts","./src/app/simulator/memory.service.ts","./src/app/assembler/assembler.service.ts","./src/app/shared/shared.module.ts","./src/app/shared/get-char.pipe.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/header/header.component.ts","./src/app/header/header.component.html","./src/app/footer/footer.component.ts","./src/app/footer/footer.component.html","./src/app/instruction/instruction.component.html","./src/app/instruction/instruction.component.ts","./src/app/shared/flag.pipe.ts","./src/app/registers/registers.component.ts","./src/app/registers/registers.component.html","./src/app/simulator/cpu.service.ts","./src/app/shared/constants.ts","./src/app/output/output.component.ts","./src/app/output/output.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { AssembleLabels } from '../assembler/assembler.service';\nimport { MemoryService } from '../simulator/memory.service';\n\n@Component({\n  selector: 'app-labels',\n  templateUrl: './labels.component.html',\n  styleUrls: ['./labels.component.less'],\n})\nexport class LabelsComponent implements OnChanges {\n  @Input() displayHex = false;\n  @Input() labels: AssembleLabels = {};\n  @Output() jump = new EventEmitter();\n  _data = [];\n\n  constructor(public memory: MemoryService) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    const currentValue = changes.labels.currentValue;\n    if (currentValue) {\n      if (Object.keys(currentValue).length > 0) {\n        this._data = [1];\n      } else {\n        this._data = [];\n      }\n    }\n  }\n\n  jumpToLine(index: number) {\n    this.jump.emit(index);\n  }\n}\n","<nz-table [nzShowPagination]=\"false\" [nzData]=\"_data\">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Address</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <ng-container *ngFor=\"let data of labels | keyvalue; let index = index\">\n      <tr class=\"codelabel\">\n        <td class=\"codelabel-name\">{{ data.key }}</td>\n        <td class=\"codelable-line\">\n          <a (click)=\"jumpToLine(data.value)\">\n            {{ data.value | numeral: displayHex }}\n          </a>\n        </td>\n        <td class=\"codelabel-value\">\n          {{ memory.data[data.value] | numeral: displayHex }}\n          <ng-template\n            [ngIf]=\"\n              memory.data[data.value] >= 32 && memory.data[data.value] <= 126\n            \"\n          >\n            <span> ('{{ memory.data[data.value] | getChar }}') </span>\n          </ng-template>\n        </td>\n      </tr>\n    </ng-container>\n  </tbody>\n</nz-table>\n","import { Component } from '@angular/core';\nimport { NzMessageService } from 'ng-zorro-antd/message';\nimport {\n  AssembleLabels,\n  AssembleMapping,\n  AssemblerService\n} from '../assembler/assembler.service';\nimport { MAX_SP, OUTPUT_START_INDEX } from '../shared/constants';\nimport { CpuService } from '../simulator/cpu.service';\nimport { MemoryService } from '../simulator/memory.service';\n\n@Component({\n  selector: 'app-simulator',\n  templateUrl: './simulator.component.html',\n  styleUrls: ['./simulator.component.less'],\n})\nexport class SimulatorComponent {\n\n  constructor(\n    public cpu: CpuService,\n    public memory: MemoryService,\n    public assembler: AssemblerService,\n    private message: NzMessageService\n  ) {}\n  error = '';\n  assembled = false;\n  isRunning = false;\n  displayHex = true;\n  displayInstr = true;\n  displayA = true;\n  displayB = true;\n  displayC = true;\n  displayD = true;\n  readonly speeds = [\n    { speed: 1, desc: '1 Hz' },\n    { speed: 4, desc: '4 Hz' },\n    { speed: 8, desc: '8 Hz' },\n    { speed: 16, desc: '16 Hz' },\n    { speed: 32, desc: '32 Hz' },\n  ];\n  speed = 16;\n  selectedLine = -1;\n  code = `;Simple example\n;Writes \"Hello 42\" to the output\n\n  JMP start\nhello:\n  DB \"Hello 42!\"  ; Variable\n  DB 0            ; String terminator\n\nstart:\n  MOV C, hello    ; Point to var\n  MOV D, 232      ; Point to output\n  CALL print\n  HLT             ; Stop execution\n\nprint:            ; print(C:*from, D:*to)\n  PUSH A\n  PUSH B\n  MOV B, 0\n.loop:\n  MOV A, [C]      ; Get char from var\n  MOV [D], A      ; Write to output\n  INC C\n  INC D\n  CMP B, [C]      ; Check if end\n  JNZ .loop       ; jump if not\n\n  POP B\n  POP A\n  RET`;\n\n  mapping: AssembleMapping;\n  labels: AssembleLabels;\n\n  runner: number = null;\n  reset() {\n    if (this.isRunning) {\n      this.message.create('warning', `Can not reset simulator when running!`);\n      return;\n    }\n    this.cpu.reset();\n    this.memory.reset();\n    this.assembled = false;\n    this.error = '';\n    this.selectedLine = -1;\n    this.mapping = {};\n    this.labels = {};\n  }\n\n  executeStep() {\n    if (!this.assembled) {\n      this.message.create('error', `Can not execute before assembling!`);\n      return;\n    }\n    try {\n      // Execute\n      // make CPU step once, execute one instruction\n      const res = this.cpu.step();\n\n      if (this.cpu.ip in this.mapping) {\n        this.selectedLine = this.mapping[this.cpu.ip];\n      }\n      return res;\n    } catch (error) {\n      this.error = `${error}`;\n      return false;\n    }\n  }\n  run() {\n    this.ensureProgramLoaded();\n    this.isRunning = true;\n    this.runner = window.setTimeout(() => {\n      if (this.executeStep() === true) {\n        this.run();\n      } else {\n        this.isRunning = false;\n      }\n    }, 1000 / this.speed);\n  }\n\n  stop() {\n    window.clearTimeout(this.runner);\n    this.isRunning = false;\n  }\n\n  ensureProgramLoaded() {\n    let needAssemble = true;\n    do {\n      for (let i = 0, l = this.memory.data.length; i < l; i++) {\n        if (this.memory.data[i] !== 0) {\n          needAssemble = false;\n          break;\n        }\n      }\n    } while (false);\n\n    if (needAssemble) {\n      this.assemble();\n    }\n  }\n\n  assemble() {\n    if (this.assembled) {\n      return;\n    }\n    try {\n      this.reset();\n      const assembly = this.assembler.go(this.code);\n      this.mapping = assembly.mapping;\n      this.labels = assembly.labels;\n      const binary = assembly.code;\n\n      if (binary.length > this.memory.data.length) {\n        throw new Error(\n          `Binary code does not fit into the memory. Max ${this.memory.data.length} bytes are allowed`\n        );\n      }\n      for (let i = 0, l = binary.length; i < l; i++) {\n        this.memory.data[i] = binary[i];\n      }\n      this.assembled = true;\n    } catch (error) {\n      this.assembled = false;\n      if (error.line !== undefined) {\n        this.error = `${error.line} | ${error.error}`;\n        this.selectedLine = error.line;\n      } else {\n        this.error = error;\n      }\n    }\n  }\n\n  parsedCode(code: string) {\n    this.code = code;\n  }\n  jumpToLine(index: number | string) {\n    window.document.querySelector('#sourceCode').scrollIntoView();\n    this.selectedLine = this.mapping[index];\n  }\n\n  isInstruction(index: number | string) {\n    return (\n      this.mapping !== undefined &&\n      this.mapping[index] !== undefined &&\n      this.displayInstr\n    );\n  }\n\n  getMemoryCellCss(index: number) {\n    if (index >= OUTPUT_START_INDEX) {\n      return 'output-bg';\n    }\n\n    if (this.isInstruction(index)) {\n      return 'instr-bg';\n    }\n\n    if (index > this.cpu.sp && index <= MAX_SP) {\n      return 'stack-bg';\n    }\n\n    return '';\n  }\n\n  getMemoryInnerCellCss(index: number) {\n    if (index === this.cpu.ip) {\n      return 'marker marker-ip';\n    }\n\n    if (index === this.cpu.sp) {\n      return 'marker marker-sp';\n    }\n\n    if (index === this.cpu.gpr[0] && this.displayA) {\n      return 'marker marker-a';\n    }\n\n    if (index === this.cpu.gpr[1] && this.displayB) {\n      return 'marker marker-b';\n    }\n\n    if (index === this.cpu.gpr[2] && this.displayC) {\n      return 'marker marker-c';\n    }\n\n    if (index === this.cpu.gpr[3] && this.displayD) {\n      return 'marker marker-d';\n    }\n\n    return '';\n  }\n}\n","<nz-card [nzBorderless]=\"true\">\n  <ng-template [ngIf]=\"error\">\n    <nz-alert nzType=\"error\" [nzMessage]=\"error\"></nz-alert>\n  </ng-template>\n  <div nz-row [nzGutter]=\"16\">\n    <div nz-col nzSpan=\"8\">\n      <nz-card nzTitle=\"Code\" [nzExtra]=\"instructionSet\">\n        <textarea\n          #textarea\n          id=\"sourceCode\"\n          class=\"source-code\"\n          rows=\"30\"\n          nz-input\n          tabSupport\n          [selectedLine]=\"selectedLine\"\n          [(ngModel)]=\"code\"\n        ></textarea>\n      </nz-card>\n      <ng-template #instructionSet>\n        <app-instruction></app-instruction>\n      </ng-template>\n    </div>\n    <div nz-col nzSpan=\"8\">\n      <nz-button-group>\n        <app-uploader (onParse)=\"parsedCode($event)\"></app-uploader>\n        <button nz-button (click)=\"assemble()\">\n          <i nz-icon nzType=\"apartment\" nzTheme=\"outline\"></i>Assemble\n        </button>\n        <ng-template *ngIf=\"isRunning; then stopButton; else runButton\">\n        </ng-template>\n        <ng-template #runButton>\n          <button nz-button nzType=\"primary\" (click)=\"run()\">\n            <i nz-icon nzType=\"fast-forward\" nzTheme=\"outline\"></i>Run\n          </button></ng-template\n        >\n        <ng-template #stopButton>\n          <button nz-button nzType=\"primary\" nzDanger (click)=\"stop()\">\n            <i nz-icon nzType=\"pause\" nzTheme=\"outline\"></i>Stop\n          </button></ng-template\n        >\n\n        <button nz-button nzType=\"default\" (click)=\"executeStep()\">\n          <i nz-icon nzType=\"step-forward\" nzTheme=\"outline\"></i> Step\n        </button>\n\n        <button nz-button nzType=\"default\" (click)=\"reset()\">\n          <i nz-icon nzType=\"undo\" nzTheme=\"outline\"></i>Reset\n        </button>\n      </nz-button-group>\n      <nz-divider></nz-divider>\n      <nz-card nzTitle=\"CPU & Memory\">\n        <app-registers [displayHex]=\"displayHex\"></app-registers>\n        <h4 nz-typography>RAM</h4>\n        <div class=\"source-code memorys\">\n          <ng-container *ngFor=\"let m of memory.data; let index = index\">\n            <div class=\"memory-block\" [ngClass]=\"getMemoryCellCss(index)\">\n              <div\n                [ngClass]=\"getMemoryInnerCellCss(index)\"\n                [ngSwitch]=\"isInstruction(index)\"\n              >\n                <small *ngSwitchDefault>{{ m | numeral: displayHex }}</small>\n                <a *ngSwitchCase=\"true\" (click)=\"jumpToLine(index)\">\n                  <small>{{ m | numeral: displayHex }}</small>\n                </a>\n              </div>\n            </div>\n          </ng-container>\n        </div>\n      </nz-card>\n    </div>\n    <div nz-col nzSpan=\"8\">\n      <nz-card>\n        <h4 nz-typography>Output</h4>\n        <app-output></app-output>\n        <nz-divider></nz-divider>\n        <h4 nz-typography>Labels</h4>\n        <app-labels\n          [displayHex]=\"displayHex\"\n          [labels]=\"labels\"\n          (jump)=\"jumpToLine($event)\"\n        ></app-labels>\n        <nz-divider></nz-divider>\n        <nz-descriptions nzTitle=\"Display Controls\">\n          <nz-descriptions-item nzTitle=\"Clock speed\">\n            <nz-select [(ngModel)]=\"speed\" [nzSize]=\"'small'\">\n              <ng-container *ngFor=\"let item of speeds; let index = index\">\n                <nz-option\n                  [nzValue]=\"item.speed\"\n                  [nzLabel]=\"item.desc\"\n                ></nz-option>\n              </ng-container>\n            </nz-select>\n          </nz-descriptions-item>\n          <nz-descriptions-item nzTitle=\"Instructions\">\n            <nz-switch\n              [(ngModel)]=\"displayInstr\"\n              nzCheckedChildren=\"Show\"\n              nzUnCheckedChildren=\"Hide\"\n            ></nz-switch>\n          </nz-descriptions-item>\n          <nz-descriptions-item nzTitle=\"View\">\n            <nz-switch\n              [(ngModel)]=\"displayHex\"\n              nzCheckedChildren=\"Show\"\n              nzUnCheckedChildren=\"Hide\"\n            ></nz-switch>\n          </nz-descriptions-item>\n        </nz-descriptions>\n        <nz-descriptions nzTitle=\"Register addressing\">\n          <nz-descriptions-item nzTitle=\"A\">\n            <nz-switch\n              [(ngModel)]=\"displayA\"\n              nzCheckedChildren=\"Show\"\n              nzUnCheckedChildren=\"Hide\"\n            ></nz-switch>\n          </nz-descriptions-item>\n          <nz-descriptions-item nzTitle=\"B\">\n            <nz-switch\n              [(ngModel)]=\"displayB\"\n              nzCheckedChildren=\"Show\"\n              nzUnCheckedChildren=\"Hide\"\n            ></nz-switch>\n          </nz-descriptions-item>\n          <nz-descriptions-item nzTitle=\"C\">\n            <nz-switch\n              [(ngModel)]=\"displayC\"\n              nzCheckedChildren=\"Show\"\n              nzUnCheckedChildren=\"Hide\"\n            ></nz-switch>\n          </nz-descriptions-item>\n          <nz-descriptions-item nzTitle=\"D\">\n            <nz-switch\n              [(ngModel)]=\"displayD\"\n              nzCheckedChildren=\"Show\"\n              nzUnCheckedChildren=\"Hide\"\n            ></nz-switch>\n          </nz-descriptions-item>\n        </nz-descriptions>\n      </nz-card>\n    </div>\n  </div>\n</nz-card>\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { NzUploadFile } from 'ng-zorro-antd/upload';\n\n@Component({\n  selector: 'app-uploader',\n  templateUrl: './uploader.component.html',\n  styleUrls: ['./uploader.component.less'],\n})\nexport class UploaderComponent {\n  @Output() onParse = new EventEmitter<string>();\n\n  stopUpload = (file: NzUploadFile): boolean => {\n    const reader = new FileReader();\n    reader.readAsText(file as any);\n    reader.onload = (e) => {\n      this.onParse.emit(e.target.result.toString());\n    };\n    return false;\n  }\n}\n","<nz-upload [nzBeforeUpload]=\"stopUpload\">\n  <button nz-button><i nz-icon nzType=\"upload\"></i>Upload .asm</button>\n</nz-upload>\n","import { Directive, ElementRef, Input, OnChanges } from '@angular/core';\n\n@Directive({\n  selector: '[selectedLine]',\n})\nexport class SelectedLineDirective implements OnChanges {\n  @Input() selectedLine = -1;\n\n  constructor(private el: ElementRef) {}\n  ngOnChanges(changes) {\n    if (changes.selectedLine) {\n      const { selectedLine } = changes;\n      if (selectedLine.currentValue >= 0) {\n        const element = this.el.nativeElement;\n        const lines = element.value.split('\\n');\n        // Calculate start/end\n        let startPos = 0;\n        for (let x = 0; x < lines.length; x++) {\n          if (x == selectedLine.currentValue) {\n            break;\n          }\n          startPos += lines[x].length + 1;\n        }\n        const endPos = lines[selectedLine.currentValue].length + startPos;\n        // // Chrome / Firefox\n        if (typeof element.selectionStart != 'undefined') {\n          element.focus();\n          element.selectionStart = startPos;\n          element.selectionEnd = endPos;\n        }\n      }\n    }\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconDefinition } from '@ant-design/icons-angular';\nimport {\n  ApartmentOutline,\n  FastForwardOutline,\n  PauseOutline,\n  StepForwardOutline,\n  UndoOutline,\n  UploadOutline,\n} from '@ant-design/icons-angular/icons';\nimport { NzAlertModule } from 'ng-zorro-antd/alert';\nimport { NzButtonModule } from 'ng-zorro-antd/button';\nimport { NzCardModule } from 'ng-zorro-antd/card';\nimport { NzConfig, NZ_CONFIG } from 'ng-zorro-antd/core/config';\nimport { NzDescriptionsModule } from 'ng-zorro-antd/descriptions';\nimport { NzDividerModule } from 'ng-zorro-antd/divider';\nimport { NzDrawerModule } from 'ng-zorro-antd/drawer';\nimport { NzGridModule } from 'ng-zorro-antd/grid';\nimport { en_US, NZ_I18N } from 'ng-zorro-antd/i18n';\nimport { NzInputModule } from 'ng-zorro-antd/input';\nimport { NzLayoutModule } from 'ng-zorro-antd/layout';\nimport { NzMessageModule } from 'ng-zorro-antd/message';\nimport { NzSelectModule } from 'ng-zorro-antd/select';\nimport { NzSwitchModule } from 'ng-zorro-antd/switch';\nimport { NzTableModule } from 'ng-zorro-antd/table';\nimport { NzTypographyModule } from 'ng-zorro-antd/typography';\nimport { NzUploadModule } from 'ng-zorro-antd/upload';\n\nconst exports = [\n  NzAlertModule,\n  NzButtonModule,\n  NzCardModule,\n  NzDescriptionsModule,\n  NzDividerModule,\n  NzDrawerModule,\n  NzGridModule,\n  NzInputModule,\n  NzLayoutModule,\n  NzMessageModule,\n  NzSelectModule,\n  NzSwitchModule,\n  NzTableModule,\n  NzTypographyModule,\n  NzUploadModule,\n];\n\nconst ngZorroConfig: NzConfig = {\n  card: { nzSize: 'small' },\n  table: { nzSize: 'small' },\n};\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule].concat(exports),\n  providers: [\n    { provide: NZ_I18N, useValue: en_US },\n    {\n      provide: NZ_CONFIG,\n      useValue: ngZorroConfig,\n    },\n  ],\n  exports,\n})\nexport class NzModule {}\n\nexport const NzIcons: IconDefinition[] = [\n  ApartmentOutline,\n  FastForwardOutline,\n  PauseOutline,\n  StepForwardOutline,\n  UndoOutline,\n  UploadOutline,\n];\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'numeral',\n})\nexport class NumeralPipe implements PipeTransform {\n  transform(value: number, isHex: boolean): string {\n    if (isHex) {\n      const hex = value.toString(16).toUpperCase();\n      // return hex.length === 1 ? '0'+hex : hex;\n      return ('00' + hex).slice(-2);\n    }\n\n    return value.toString(10);\n  }\n}\n","import { Directive, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[tabSupport]',\n})\nexport class TabSupportDirective {\n  constructor() {}\n  @HostListener('window:keydown', ['$event'])\n  handleKeyDown(event: KeyboardEvent) {\n    if (event.key === 'Tab') {\n      const target = event.target as HTMLTextAreaElement;\n      const val = target.value;\n      const start = target.selectionStart;\n      const end = target.selectionEnd;\n\n      target.value = val.substring(0, start) + '\\t' + val.substring(end);\n      target.selectionStart = target.selectionEnd = start + 1;\n\n      event.preventDefault();\n      return false;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { OPCodes, OUTPUT_START_INDEX } from '../shared/constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MemoryService {\n  output$ = new BehaviorSubject<number[]>([]);\n  data: Array<number | OPCodes>;\n  lastAccess = -1;\n\n  constructor() {\n    this.data = new Array(256);\n    this.reset();\n  }\n\n  /**\n   * load value from address\n   * @param address\n   */\n  public load(address: number) {\n    this.checkAddress(address);\n    this.lastAccess = address;\n    return this.data[address];\n  }\n\n  /**\n   * store value at address\n   * @param address\n   * @param value\n   */\n  public store(address: number, value: number) {\n    this.checkAddress(address);\n    this.lastAccess = address;\n    this.data[address] = value;\n    if (address >= OUTPUT_START_INDEX) {\n      this.emitOutput();\n    }\n  }\n  /**\n   * reset memory to 0000000...0\n   */\n  public reset() {\n    this.lastAccess = -1;\n    const { data } = this;\n    for (let index = 0, l = this.data.length; index < l; index++) {\n      data[index] = 0;\n    }\n    this.emitOutput();\n  }\n\n  /**\n   * check address validation\n   * @param address\n   */\n  public checkAddress(address: number) {\n    if (address < 0 || address >= this.data.length) {\n      throw new Error(`Memory access violation at ${address}`);\n    }\n  }\n\n  private emitOutput() {\n    this.output$.next(this.data.slice(OUTPUT_START_INDEX));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OPCodes, REGEX, RegexLabel, RegexNum } from '../shared/constants';\n\nexport type AssembleCode = number[];\nexport type AssembleMapping = Record<string, number>;\nexport type AssembleLabels = Record<string, number>;\n@Injectable({\n  providedIn: 'root',\n})\nexport class AssemblerService {\n  go(input: string) {\n    // Regex group indexes for operands\n    const op1_group = 3;\n    const op2_group = 7;\n\n    // Contains the program code & data generated by the assembler\n    const code: AssembleCode = [];\n    // Contains the mapping from instructions to assembler line\n    const mapping: AssembleMapping = {};\n    // Hash map of label used to replace the labels after the assembler generated the code\n    const labels: AssembleLabels = {};\n    // Hash of uppercase labels used to detect duplicates\n    const normalizedLabels: AssembleLabels = {};\n\n    // Split text into code lines\n    const lines = input.split('\\n');\n\n    for (let i = 0, l = lines.length; i < l; i++) {\n      try {\n        const match = REGEX.exec(lines[i]);\n        if (match[1] !== undefined || match[2] !== undefined) {\n          if (match[1] !== undefined) {\n            this.addLabel(match[1], normalizedLabels, labels, code);\n          }\n\n          if (match[2] !== undefined) {\n            const instr = match[2].toUpperCase();\n            let p1, p2, opCode;\n\n            // Add mapping instr pos to line number\n            // Don't do it for DB as this is not a real instruction\n            if (instr !== 'DB') {\n              mapping[code.length] = i;\n            }\n\n            switch (instr) {\n              case 'DB':\n                p1 = this.getValue(match[op1_group]);\n                this.checkOneOperand(instr, p1);\n\n                if (p1.type === 'number') {\n                  code.push(p1.value);\n                } else if (p1.type === 'numbers') {\n                  for (let j = 0, k = p1.value.length; j < k; j++) {\n                    code.push(p1.value[j]);\n                  }\n                } else {\n                  throw new Error('DB does not support this operand');\n                }\n\n                break;\n              case 'NOP':\n                this.checkNoExtraArg('NOP', match[op1_group]);\n                code.push(OPCodes.NOPE);\n                break;\n              case 'HLT':\n                this.checkNoExtraArg('HLT', match[op1_group]);\n                code.push(OPCodes.NONE);\n                break;\n\n              case 'MOV':\n                p1 = this.getValue(match[op1_group]);\n                p2 = this.getValue(match[op2_group]);\n                this.checkTwoOperands(instr, p1, p2);\n\n                if (p1.type === 'register' && p2.type === 'register') {\n                  opCode = OPCodes.MOV_REG_TO_REG;\n                } else if (p1.type === 'register' && p2.type === 'address') {\n                  opCode = OPCodes.MOV_ADDRESS_TO_REG;\n                } else if (p1.type === 'register' && p2.type === 'regaddress') {\n                  opCode = OPCodes.MOV_REGADDRESS_TO_REG;\n                } else if (p1.type === 'address' && p2.type === 'register') {\n                  opCode = OPCodes.MOV_REG_TO_ADDRESS;\n                } else if (p1.type === 'regaddress' && p2.type === 'register') {\n                  opCode = OPCodes.MOV_REG_TO_REGADDRESS;\n                } else if (p1.type === 'register' && p2.type === 'number') {\n                  opCode = OPCodes.MOV_NUMBER_TO_REG;\n                } else if (p1.type === 'address' && p2.type === 'number') {\n                  opCode = OPCodes.MOV_NUMBER_TO_ADDRESS;\n                } else if (p1.type === 'regaddress' && p2.type === 'number') {\n                  opCode = OPCodes.MOV_NUMBER_TO_REGADDRESS;\n                } else {\n                  throw new Error('MOV does not support this operands');\n                }\n\n                code.push(opCode, p1.value, p2.value);\n                break;\n              case 'ADD':\n                p1 = this.getValue(match[op1_group]);\n                p2 = this.getValue(match[op2_group]);\n                this.checkTwoOperands(instr, p1, p2);\n\n                if (p1.type === 'register' && p2.type === 'register') {\n                  opCode = OPCodes.ADD_REG_TO_REG;\n                } else if (p1.type === 'register' && p2.type === 'regaddress') {\n                  opCode = OPCodes.ADD_REGADDRESS_TO_REG;\n                } else if (p1.type === 'register' && p2.type === 'address') {\n                  opCode = OPCodes.ADD_ADDRESS_TO_REG;\n                } else if (p1.type === 'register' && p2.type === 'number') {\n                  opCode = OPCodes.ADD_NUMBER_TO_REG;\n                } else {\n                  throw new Error('ADD does not support this operands');\n                }\n                code.push(opCode, p1.value, p2.value);\n                break;\n              case 'SUB':\n                p1 = this.getValue(match[op1_group]);\n                p2 = this.getValue(match[op2_group]);\n                this.checkTwoOperands(instr, p1, p2);\n\n                if (p1.type === 'register' && p2.type === 'register') {\n                  opCode = OPCodes.SUB_REG_FROM_REG;\n                } else if (p1.type === 'register' && p2.type === 'regaddress') {\n                  opCode = OPCodes.SUB_REGADDRESS_FROM_REG;\n                } else if (p1.type === 'register' && p2.type === 'address') {\n                  opCode = OPCodes.SUB_ADDRESS_FROM_REG;\n                } else if (p1.type === 'register' && p2.type === 'number') {\n                  opCode = OPCodes.SUB_NUMBER_FROM_REG;\n                } else {\n                  throw new Error('SUB does not support this operands');\n                }\n                code.push(opCode, p1.value, p2.value);\n                break;\n              case 'INC':\n                p1 = this.getValue(match[op1_group]);\n                this.checkOneOperand(instr, p1);\n                this.checkNoExtraArg(instr, match[op2_group]);\n\n                if (p1.type === 'register') {\n                  opCode = OPCodes.INC_REG;\n                } else {\n                  throw new Error('INC does not support this operand');\n                }\n                code.push(opCode, p1.value);\n                break;\n              case 'DEC':\n                p1 = this.getValue(match[op1_group]);\n                this.checkOneOperand(instr, p1);\n                this.checkNoExtraArg(instr, match[op2_group]);\n\n                if (p1.type === 'register') {\n                  opCode = OPCodes.DEC_REG;\n                } else {\n                  throw new Error('DEC does not support this operand');\n                }\n\n                code.push(opCode, p1.value);\n\n                break;\n              case 'CMP':\n                p1 = this.getValue(match[op1_group]);\n                p2 = this.getValue(match[op2_group]);\n                this.checkTwoOperands(instr, p1, p2);\n\n                if (p1.type === 'register' && p2.type === 'register') {\n                  opCode = OPCodes.CMP_REG_WITH_REG;\n                } else if (p1.type === 'register' && p2.type === 'regaddress') {\n                  opCode = OPCodes.CMP_REGADDRESS_WITH_REG;\n                } else if (p1.type === 'register' && p2.type === 'address') {\n                  opCode = OPCodes.CMP_ADDRESS_WITH_REG;\n                } else if (p1.type === 'register' && p2.type === 'number') {\n                  opCode = OPCodes.CMP_NUMBER_WITH_REG;\n                } else {\n                  throw new Error('CMP does not support this operands');\n                }\n                code.push(opCode, p1.value, p2.value);\n                break;\n              case 'JMP':\n                p1 = this.getValue(match[op1_group]);\n                this.checkOneOperand(instr, p1);\n                this.checkNoExtraArg(instr, match[op2_group]);\n\n                if (p1.type === 'register') {\n                  opCode = OPCodes.JMP_REGADDRESS;\n                } else if (p1.type === 'number') {\n                  opCode = OPCodes.JMP_ADDRESS;\n                } else {\n                  throw new Error('JMP does not support this operands');\n                }\n\n                code.push(opCode, p1.value);\n                break;\n              case 'JC':\n              case 'JB':\n              case 'JNAE':\n                p1 = this.getValue(match[op1_group]);\n                this.checkOneOperand(instr, p1);\n                this.checkNoExtraArg(instr, match[op2_group]);\n\n                if (p1.type === 'register') {\n                  opCode = OPCodes.JC_REGADDRESS;\n                } else if (p1.type === 'number') {\n                  opCode = OPCodes.JC_ADDRESS;\n                } else {\n                  throw new Error(`${instr}  does not support this operand`);\n                }\n\n                code.push(opCode, p1.value);\n                break;\n              case 'JNC':\n              case 'JNB':\n              case 'JAE':\n                p1 = this.getValue(match[op1_group]);\n                this.checkOneOperand(instr, p1);\n                this.checkNoExtraArg(instr, match[op2_group]);\n\n                if (p1.type === 'register') {\n                  opCode = OPCodes.JNC_REGADDRESS;\n                } else if (p1.type === 'number') {\n                  opCode = OPCodes.JNC_ADDRESS;\n                } else {\n                  throw new Error(`${instr}  does not support this operand`);\n                }\n\n                code.push(opCode, p1.value);\n                break;\n              case 'JZ':\n              case 'JE':\n                p1 = this.getValue(match[op1_group]);\n                this.checkOneOperand(instr, p1);\n                this.checkNoExtraArg(instr, match[op2_group]);\n\n                if (p1.type === 'register') {\n                  opCode = OPCodes.JZ_REGADDRESS;\n                } else if (p1.type === 'number') {\n                  opCode = OPCodes.JZ_ADDRESS;\n                } else {\n                  throw new Error(`${instr} does not support this operand`);\n                }\n\n                code.push(opCode, p1.value);\n                break;\n              case 'JNZ':\n              case 'JNE':\n                p1 = this.getValue(match[op1_group]);\n                this.checkOneOperand(instr, p1);\n                this.checkNoExtraArg(instr, match[op2_group]);\n\n                if (p1.type === 'register') {\n                  opCode = OPCodes.JNZ_REGADDRESS;\n                } else if (p1.type === 'number') {\n                  opCode = OPCodes.JNZ_ADDRESS;\n                } else {\n                  throw new Error(`${instr} does not support this operand`);\n                }\n\n                code.push(opCode, p1.value);\n                break;\n              case 'JA':\n              case 'JNBE':\n                p1 = this.getValue(match[op1_group]);\n                this.checkOneOperand(instr, p1);\n                this.checkNoExtraArg(instr, match[op2_group]);\n\n                if (p1.type === 'register') {\n                  opCode = OPCodes.JA_REGADDRESS;\n                } else if (p1.type === 'number') {\n                  opCode = OPCodes.JA_ADDRESS;\n                } else {\n                  throw new Error(`${instr} does not support this operand`);\n                }\n\n                code.push(opCode, p1.value);\n                break;\n              case 'JNA':\n              case 'JBE':\n                p1 = this.getValue(match[op1_group]);\n                this.checkOneOperand(instr, p1);\n                this.checkNoExtraArg(instr, match[op2_group]);\n\n                if (p1.type === 'register') {\n                  opCode = OPCodes.JNA_REGADDRESS;\n                } else if (p1.type === 'number') {\n                  opCode = OPCodes.JNA_ADDRESS;\n                } else {\n                  throw new Error(`${instr} does not support this operand`);\n                }\n\n                code.push(opCode, p1.value);\n                break;\n              case 'PUSH':\n                p1 = this.getValue(match[op1_group]);\n                this.checkOneOperand(instr, p1);\n                this.checkNoExtraArg(instr, match[op2_group]);\n\n                if (p1.type === 'register') {\n                  opCode = OPCodes.PUSH_REG;\n                } else if (p1.type === 'regaddress') {\n                  opCode = OPCodes.PUSH_REGADDRESS;\n                } else if (p1.type === 'address') {\n                  opCode = OPCodes.PUSH_ADDRESS;\n                } else if (p1.type === 'number') {\n                  opCode = OPCodes.PUSH_NUMBER;\n                } else {\n                  throw new Error('PUSH does not support this operand');\n                }\n\n                code.push(opCode, p1.value);\n                break;\n              case 'POP':\n                p1 = this.getValue(match[op1_group]);\n                this.checkNoExtraArg(instr, match[op2_group]);\n                this.checkOneOperand(instr, p1);\n\n                if (p1.type === 'register') {\n                  opCode = OPCodes.POP_REG;\n                } else {\n                  throw new Error('POP does not support this operand');\n                }\n\n                code.push(opCode, p1.value);\n                break;\n              case 'CALL':\n                p1 = this.getValue(match[op1_group]);\n                this.checkNoExtraArg(instr, match[op2_group]);\n                this.checkOneOperand(instr, p1);\n\n                if (p1.type === 'register') {\n                  opCode = OPCodes.CALL_REGADDRESS;\n                } else if (p1.type === 'number') {\n                  opCode = OPCodes.CALL_ADDRESS;\n                } else {\n                  throw new Error('CALL does not support this operand');\n                }\n\n                code.push(opCode, p1.value);\n                break;\n              case 'RET':\n                this.checkNoExtraArg(instr, match[op1_group]);\n\n                opCode = OPCodes.RET;\n\n                code.push(opCode);\n                break;\n\n              case 'MUL':\n                p1 = this.getValue(match[op1_group]);\n                this.checkOneOperand(instr, p1);\n                this.checkNoExtraArg(instr, match[op2_group]);\n\n                if (p1.type === 'register') {\n                  opCode = OPCodes.MUL_REG;\n                } else if (p1.type === 'regaddress') {\n                  opCode = OPCodes.MUL_REGADDRESS;\n                } else if (p1.type === 'address') {\n                  opCode = OPCodes.MUL_ADDRESS;\n                } else if (p1.type === 'number') {\n                  opCode = OPCodes.MUL_NUMBER;\n                } else {\n                  throw new Error('MUL does not support this operand');\n                }\n\n                code.push(opCode, p1.value);\n                break;\n              case 'DIV':\n                p1 = this.getValue(match[op1_group]);\n                this.checkOneOperand(instr, p1);\n                this.checkNoExtraArg(instr, match[op2_group]);\n\n                if (p1.type === 'register') {\n                  opCode = OPCodes.DIV_REG;\n                } else if (p1.type === 'regaddress') {\n                  opCode = OPCodes.DIV_REGADDRESS;\n                } else if (p1.type === 'address') {\n                  opCode = OPCodes.DIV_ADDRESS;\n                } else if (p1.type === 'number') {\n                  opCode = OPCodes.DIV_NUMBER;\n                } else {\n                  throw new Error('DIV does not support this operand');\n                }\n\n                code.push(opCode, p1.value);\n                break;\n              case 'AND':\n                p1 = this.getValue(match[op1_group]);\n                p2 = this.getValue(match[op2_group]);\n                this.checkTwoOperands(instr, p1, p2);\n\n                if (p1.type === 'register' && p2.type === 'register') {\n                  opCode = OPCodes.AND_REG_WITH_REG;\n                } else if (p1.type === 'register' && p2.type === 'regaddress') {\n                  opCode = OPCodes.AND_REGADDRESS_WITH_REG;\n                } else if (p1.type === 'register' && p2.type === 'address') {\n                  opCode = OPCodes.AND_ADDRESS_WITH_REG;\n                } else if (p1.type === 'register' && p2.type === 'number') {\n                  opCode = OPCodes.AND_NUMBER_WITH_REG;\n                } else {\n                  throw new Error('AND does not support this operands');\n                }\n\n                code.push(opCode, p1.value, p2.value);\n                break;\n              case 'OR':\n                p1 = this.getValue(match[op1_group]);\n                p2 = this.getValue(match[op2_group]);\n                this.checkTwoOperands(instr, p1, p2);\n\n                if (p1.type === 'register' && p2.type === 'register') {\n                  opCode = OPCodes.OR_REG_WITH_REG;\n                } else if (p1.type === 'register' && p2.type === 'regaddress') {\n                  opCode = OPCodes.OR_REGADDRESS_WITH_REG;\n                } else if (p1.type === 'register' && p2.type === 'address') {\n                  opCode = OPCodes.OR_ADDRESS_WITH_REG;\n                } else if (p1.type === 'register' && p2.type === 'number') {\n                  opCode = OPCodes.OR_NUMBER_WITH_REG;\n                } else {\n                  throw new Error('OR does not support this operands');\n                }\n                code.push(opCode, p1.value, p2.value);\n                break;\n              case 'XOR':\n                p1 = this.getValue(match[op1_group]);\n                p2 = this.getValue(match[op2_group]);\n                this.checkTwoOperands(instr, p1, p2);\n\n                if (p1.type === 'register' && p2.type === 'register') {\n                  opCode = OPCodes.XOR_REG_WITH_REG;\n                } else if (p1.type === 'register' && p2.type === 'regaddress') {\n                  opCode = OPCodes.XOR_REGADDRESS_WITH_REG;\n                } else if (p1.type === 'register' && p2.type === 'address') {\n                  opCode = OPCodes.XOR_ADDRESS_WITH_REG;\n                } else if (p1.type === 'register' && p2.type === 'number') {\n                  opCode = OPCodes.XOR_NUMBER_WITH_REG;\n                } else {\n                  throw new Error('XOR does not support this operands');\n                }\n                code.push(opCode, p1.value, p2.value);\n                break;\n              case 'NOT':\n                p1 = this.getValue(match[op1_group]);\n                this.checkOneOperand(instr, p1);\n                this.checkNoExtraArg(instr, match[op2_group]);\n\n                if (p1.type === 'register') {\n                  opCode = OPCodes.NOT_REG;\n                } else {\n                  throw new Error('NOT does not support this operand');\n                }\n\n                code.push(opCode, p1.value);\n                break;\n              case 'SHL':\n              case 'SAL':\n                p1 = this.getValue(match[op1_group]);\n                p2 = this.getValue(match[op2_group]);\n                this.checkTwoOperands(instr, p1, p2);\n\n                if (p1.type === 'register' && p2.type === 'register') {\n                  opCode = OPCodes.SHL_REG_WITH_REG;\n                } else if (p1.type === 'register' && p2.type === 'regaddress') {\n                  opCode = OPCodes.SHL_REGADDRESS_WITH_REG;\n                } else if (p1.type === 'register' && p2.type === 'address') {\n                  opCode = OPCodes.SHL_ADDRESS_WITH_REG;\n                } else if (p1.type === 'register' && p2.type === 'number') {\n                  opCode = OPCodes.SHL_NUMBER_WITH_REG;\n                } else {\n                  throw new Error(`${instr} does not support this operands`);\n                }\n                code.push(opCode, p1.value, p2.value);\n                break;\n              case 'SHR':\n              case 'SAR':\n                p1 = this.getValue(match[op1_group]);\n                p2 = this.getValue(match[op2_group]);\n                this.checkTwoOperands(instr, p1, p2);\n\n                if (p1.type === 'register' && p2.type === 'register') {\n                  opCode = OPCodes.SHR_REG_WITH_REG;\n                } else if (p1.type === 'register' && p2.type === 'regaddress') {\n                  opCode = OPCodes.SHR_REGADDRESS_WITH_REG;\n                } else if (p1.type === 'register' && p2.type === 'address') {\n                  opCode = OPCodes.SHR_ADDRESS_WITH_REG;\n                } else if (p1.type === 'register' && p2.type === 'number') {\n                  opCode = OPCodes.SHR_NUMBER_WITH_REG;\n                } else {\n                  throw new Error(`${instr} does not support this operands`);\n                }\n                break;\n              default:\n                throw new Error(`Invalid instruction: ${match[2]}`);\n            }\n          }\n        } else {\n          // Check if line starts with a comment otherwise the line contains an error and can not be parsed\n          const line = lines[i].trim();\n          if (line !== '' && line.slice(0, 1) !== ';') {\n            throw new Error('Syntax error');\n          }\n        }\n      } catch (error) {\n        throw { error, line: i };\n      }\n    }\n\n    // Replace label\n    for (let i = 0, l = code.length; i < l; i++) {\n      if (typeof code[i] !== 'number') {\n        if (code[i] in labels) {\n          code[i] = labels[code[i]];\n        } else {\n          throw { error: 'Undefined label: ' + code[i] };\n        }\n      }\n    }\n\n    return { code, mapping, labels };\n  }\n\n  private parseNumber(input: string) {\n    if (input.slice(0, 2) === '0x') {\n      return parseInt(input.slice(2), 16);\n    }\n\n    if (input.slice(0, 2) === '0o') {\n      return parseInt(input.slice(2), 8);\n    }\n\n    if (input.slice(input.length - 1) === 'b') {\n      return parseInt(input.slice(0, input.length - 1), 2);\n    }\n\n    if (input.slice(input.length - 1) === 'd') {\n      return parseInt(input.slice(0, input.length - 1), 10);\n    }\n\n    if (RegexNum.exec(input)) {\n      return parseInt(input, 10);\n    }\n\n    throw new Error('Invalid number format');\n  }\n\n  /**\n   * Allowed formats: 200, 200d, 0xA4, 0o48, 101b\n   * Allowed registers: A, B, C, D, SP\n   * @param input\n   * @returns\n   */\n  private parseRegister(input: string) {\n    input = input.toUpperCase();\n\n    if (input === 'A') {\n      return 0;\n    }\n\n    if (input === 'B') {\n      return 1;\n    }\n\n    if (input === 'C') {\n      return 2;\n    }\n\n    if (input === 'D') {\n      return 3;\n    }\n\n    if (input === 'SP') {\n      return 4;\n    }\n    return undefined;\n  }\n\n  private parseOffsetAddressing(input: string): number | undefined {\n    input = input.toUpperCase();\n    let m = 0;\n    let base = 0;\n\n    if (input[0] === 'A') {\n      base = 0;\n    } else if (input[0] === 'B') {\n      base = 1;\n    } else if (input[0] === 'C') {\n      base = 2;\n    } else if (input[0] === 'D') {\n      base = 3;\n    } else if (input.slice(0, 2) === 'SP') {\n      base = 4;\n    } else {\n      return undefined;\n    }\n    let offset_start = 1;\n    if (base === 4) {\n      offset_start = 2;\n    }\n\n    if (input[offset_start] === '-') {\n      m = -1;\n    } else if (input[offset_start] === '+') {\n      m = 1;\n    } else {\n      return undefined;\n    }\n\n    let offset = m * parseInt(input.slice(offset_start + 1), 10);\n\n    if (offset < -16 || offset > 15) {\n      throw new Error('offset must be a value between -16...+15');\n    }\n\n    if (offset < 0) {\n      offset = 32 + offset; // two's complement representation in 5-bit\n    }\n\n    return offset * 8 + base; // shift offset 3 bits right and add code for register\n  }\n\n  /**\n   * Allowed: Register, Label or Number; SP+/-Number is allowed for 'regaddress' type\n   * @param input\n   * @param typeReg register type\n   * @param typeNumber number type\n   * @returns\n   */\n  private parseRegOrNumber(\n    input: string,\n    typeReg: 'register' | 'regaddress',\n    typeNumber: 'number' | 'address'\n  ) {\n    let register = this.parseRegister(input);\n\n    if (register !== undefined) {\n      return { type: typeReg, value: register };\n    }\n\n    const label = this.parseLabel(input);\n    if (label !== undefined) {\n      return { type: typeNumber, value: label };\n    }\n\n    if (typeReg === 'regaddress') {\n      register = this.parseOffsetAddressing(input);\n\n      if (register !== undefined) {\n        return { type: typeReg, value: register };\n      }\n    }\n\n    const value = this.parseNumber(input);\n\n    if (isNaN(value)) {\n      throw new Error(`Not a ${typeNumber}: ${value}`);\n    }\n\n    if (value < 0 || value > 255) {\n      throw new Error(`${typeNumber} must have a value between 0-255`);\n    }\n\n    return { type: typeNumber, value };\n  }\n\n  private parseLabel(input: string) {\n    return RegexLabel.exec(input) ? input : undefined;\n  }\n\n  private checkOneOperand(instr: string, p1: any) {\n    if (!p1) {\n      throw new Error(`${instr} needs one operand`);\n    }\n  }\n\n  private checkTwoOperands(instr: string, p1: any, p2: any) {\n    if (!p1 || !p2) {\n      throw new Error(`${instr} needs one operand`);\n    }\n  }\n  private checkNoExtraArg(instr: string, arg: any) {\n    if (arg !== undefined) {\n      throw new Error(`${instr}: too many arguments`);\n    }\n  }\n  /**\n   * parse operands\n   * @param input\n   * @returns\n   */\n  private getValue(input?: string) {\n    if (!input) {\n      return null;\n    }\n    switch (input.slice(0, 1)) {\n      case '[': // [number] or [register]\n        const address = input.slice(1, input.length - 1);\n        return this.parseRegOrNumber(address, 'regaddress', 'address');\n      case '\"': // \"String\"\n        const text = input.slice(1, input.length - 1);\n        const chars = [];\n\n        for (let i = 0, l = text.length; i < l; i++) {\n          chars.push(text.charCodeAt(i));\n        }\n\n        return { type: 'numbers', value: chars };\n      case \"'\": // 'C'\n        const character = input.slice(1, input.length - 1);\n        if (character.length > 1) {\n          throw new Error('Only one character is allowed. Use String instead');\n        }\n\n        return { type: 'number', value: character.charCodeAt(0) };\n      default:\n        // REGISTER, NUMBER or LABEL\n        return this.parseRegOrNumber(input, 'register', 'number');\n    }\n  }\n  private addLabel(\n    label: string,\n    normalizedLabels: AssembleLabels,\n    labels: AssembleLabels,\n    code: AssembleCode\n  ) {\n    const upperLabel = label.toUpperCase();\n    if (upperLabel in normalizedLabels) {\n      throw new Error(`Duplicate label: ${label};`);\n    }\n\n    if (\n      upperLabel === 'A' ||\n      upperLabel === 'B' ||\n      upperLabel === 'C' ||\n      upperLabel === 'D'\n    ) {\n      throw new Error(`Label contains keyword: ${upperLabel}`);\n    }\n\n    labels[label] = code.length;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlagPipe } from './flag.pipe';\nimport { GetCharPipe } from './get-char.pipe';\nimport { NumeralPipe } from './numeral.pipe';\nimport { SelectedLineDirective } from './select-line.directive';\nimport { TabSupportDirective } from './tab-support.directive';\n\nconst exports = [\n  FlagPipe,\n  NumeralPipe,\n  TabSupportDirective,\n  SelectedLineDirective,\n  GetCharPipe,\n];\n\n@NgModule({\n  declarations: exports,\n  imports: [CommonModule],\n  exports,\n})\nexport class SharedModule {}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'getChar',\n})\nexport class GetCharPipe implements PipeTransform {\n  transform(value: number): string {\n    const text = String.fromCharCode(value);\n\n    if (text.trim() === '') {\n      return '\\u00A0\\u00A0';\n    }\n\n    return text;\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.less'],\n})\nexport class AppComponent {}\n","<nz-layout>\n  <nz-header>\n    <app-header></app-header>\n  </nz-header>\n  <nz-content>\n    <app-simulator></app-simulator>\n  </nz-content>\n  <nz-footer>\n    <app-footer></app-footer>\n  </nz-footer>\n</nz-layout>\n","import { registerLocaleData } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport en from '@angular/common/locales/en';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { AppComponent } from './app.component';\nimport { FooterComponent } from './footer/footer.component';\nimport { HeaderComponent } from './header/header.component';\nimport { InstructionComponent } from './instruction/instruction.component';\nimport { LabelsComponent } from './labels/labels.component';\nimport { OutputComponent } from './output/output.component';\nimport { RegistersComponent } from './registers/registers.component';\nimport { NzIcons, NzModule } from './shared/nz.module';\nimport { SharedModule } from './shared/shared.module';\nimport { SimulatorComponent } from './simulator/simulator.component';\nimport { UploaderComponent } from './uploader/uploader.component';\n\nregisterLocaleData(en);\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    InstructionComponent,\n    OutputComponent,\n    LabelsComponent,\n    RegistersComponent,\n    SimulatorComponent,\n    FooterComponent,\n    UploaderComponent,\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    SharedModule,\n    NzModule,\n    NzIconModule.forRoot(NzIcons),\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.less']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div>Simple 8-bit Assembler Simulator</div>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n})\nexport class FooterComponent {}\n","<nz-descriptions nzTitle=\"More Infomation\">\n  <nz-descriptions-item nzTitle=\"Original simulator\"\n    ><a\n      href=\"https://schweigi.github.io/assembler-simulator/\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      >Simulator Demo</a\n    ></nz-descriptions-item\n  >\n  <nz-descriptions-item nzTitle=\"Blog with details\"\n    ><a\n      href=\"https://www.mschweighauser.com/make-your-own-assembler-simulator-in-javascript-part1/\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      >Make your own Assembler simulator in JavaScript</a\n    >\n    &nbsp;by&nbsp;\n    <a\n      href=\"https://www.mschweighauser.com/author/schweigi/\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      >Macro</a\n    ></nz-descriptions-item\n  >\n  <nz-descriptions-item nzTitle=\"GitHub\">\n    <a\n      href=\"https://github.com/AkatQuas/assembler-simulator\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      >8-Bit Simulator with Angular</a\n    >\n  </nz-descriptions-item>\n</nz-descriptions>\n","<a nz-button nzType=\"link\" (click)=\"open()\">Instruction Set</a>\n<nz-drawer\n  [nzWidth]=\"1000\"\n  [nzClosable]=\"false\"\n  [nzVisible]=\"visible\"\n  nzPlacement=\"right\"\n  nzTitle=\"Instruction\"\n  (nzOnClose)=\"close()\"\n>\n  <ng-container *nzDrawerContent>\n    <p>\n      This simulator provides a simplified assembler syntax (based on\n      <a href=\"http://www.nasm.us\" target=\"_blank\">NASM</a>) and is simulating a\n      x86 like cpu. In depth documentation and introduction to assembler can be\n      found on the following websites:\n    </p>\n    <ul>\n      <li>\n        <a href=\"http://en.wikipedia.org/wiki/Assembly_language\" target=\"_blank\"\n          >Assembly - Wikipedia</a\n        >\n      </li>\n      <li>\n        <a\n          href=\"http://cs.smith.edu/~thiebaut/ArtOfAssembly/artofasm.html\"\n          target=\"_blank\"\n          >The Art of Assembly Language Programming</a\n        >\n      </li>\n      <li>\n        <a\n          href=\"http://www.nasm.us/xdoc/2.10.09/html/nasmdoc3.html\"\n          target=\"_blank\"\n          >NASM Language Documentation</a\n        >\n      </li>\n    </ul>\n    <p>\n      The simulator consists of a 8-bit cpu and 256 bytes of memory. All\n      instructions (code) and variables (data) needs to fit inside the memory.\n      For simplicity every instruction (and operand) is 1 byte. Therefore a MOV\n      instruction will use 3 bytes of memory. The simulator provides a console\n      output which is memory mapped from 0xE8 to 0xFF. Memory mapped means that\n      every value written to this memory block is visible on the console.\n    </p>\n    <h4 nz-typography>Syntax</h4>\n    <p>\n      The syntax is similar as most assemblers are using. Every instruction must\n      be on their own line. Labels are optional and must either start with a\n      letter or a dot (.) and end with a colon.\n    </p>\n    <pre>label: instruction operands\t; Comment</pre>\n    <p>Valid number formats for constants are:</p>\n    <pre>\nDecimal: 200\nDecimal: 200d\nHex: 0xA4\nOctal: 0o48\nBinary: 101b</pre\n    >\n    <p>\n      It is possible to define a number using a character or multiple numbers\n      (see instruction <i>DB</i>) by using a string.\n    </p>\n    <pre>\nCharacter: 'A'\nString: \"Hello World!\"</pre\n    >\n    <p>\n      Operands can either be one of the four general purpose registers, stack\n      pointer register, a memory address or a constant. Stack pointer register\n      can only be used as operand in MOV, ADD, SUB, CMP, INC and DEC\n      instructions. Instead of defining an address as a constant or by using a\n      register you can use labels. The assembler will then replace the label\n      with the corresponding constant.\n    </p>\n    <pre>\nGeneral purpose (GP) register: A, B, C, D\nStack pointer register: SP\nAddress using a GP register: [A]\nAddress using a GP register and offset: [D-3]\nAddress using SP register and offset: [SP+2]\nAddress using a constant: [100]\nAddress using a label: label\nConstant: Any number between 0..255 (8bit unsigned)\nOffset for indirect addressing: Integer between -16..+15 (sign is mandatory)</pre\n    >\n    <h4 nz-typography>MOV - Copy a value</h4>\n    <p>\n      Copies a value from <i>src</i> to <i>dest</i>. The MOV instruction is the\n      only one able to directly modify the memory. SP can be used as operand\n      with MOV.\n    </p>\n    <pre>\nMOV reg, reg\nMOV reg, address\nMOV reg, constant\nMOV address, reg\nMOV address, constant</pre\n    >\n    <h4 nz-typography>DB - Variable</h4>\n    <p>\n      Defines a variable. A variable can either be a single number, character or\n      a string.\n    </p>\n    <pre>DB constant</pre>\n    <h4 nz-typography>Math operations</h4>\n    <b>Addition and Subtraction</b>\n    <p>\n      Adds two numbers together or subtract one number form another. This\n      operations will modify the carry and zero flag. SP can be used as operand\n      with ADD and SUB.\n    </p>\n    <pre>\nADD reg, reg\nADD reg, address\nADD reg, constant\nSUB reg, reg\nSUB reg, address\nSUB reg, constant</pre\n    >\n    <b>Increment and Decrement</b>\n    <p>\n      Increments or decrements a register by one. This operations will modify\n      the carry and zero flag. SP can be used as operand with INC and DEC.\n    </p>\n    <pre>\nINC reg\nDEC reg</pre\n    >\n    <b>Multiplication and division</b>\n    <p>\n      Multiplies or divides the <i>A</i> register with the given value. This\n      operations will modify the carry and zero flag.\n    </p>\n    <pre>\nMUL reg\nMUL address\nMUL constant\nDIV reg\nDIV address\nDIV constant</pre\n    >\n    <b>Logical instructions</b>\n    <p>\n      The following logical instructions are supported: AND, OR, XOR, NOT. This\n      operations will modify the carry and zero flag.\n    </p>\n    <pre>\nAND reg, reg\nAND reg, address\nAND reg, constant\nOR reg, reg\nOR reg, address\nOR reg, constant\nXOR reg, reg\nXOR reg, address\nXOR reg, constant\nNOT reg</pre\n    >\n    <b>Shift instructions</b>\n    <p>\n      The following shift instructions are supported: SHL/SAL and SHR/SAR. As\n      this simulator only supports unsigned numbers SHR and SAR yield the same\n      result. This operations will modify the carry and zero flag.\n    </p>\n    <pre>\nSHL reg, reg\nSHL reg, address\nSHL reg, constant\nSHR reg, reg\nSHR reg, address\nSHR reg, constant</pre\n    >\n    <h4 nz-typography>CMP - Compare</h4>\n    <p>\n      Compares two values and sets the zero flag to true if they are equal. SP\n      can be used as operand with CMP. Use this instruction before a conditional\n      jump.\n    </p>\n    <pre>\nCMP reg, reg\nCMP reg, address\nCMP reg, constant</pre\n    >\n    <h4 nz-typography>Jumps</h4>\n    <b>JMP - Unconditional jump</b>\n    <p>\n      Let the instruction pointer do a unconditional jump to the defined\n      address.\n    </p>\n    <pre>MP address</pre>\n    <b>Conditional jumps</b>\n    <p>\n      Let the instruction pointer do a conditional jump to the defined address.\n      See the table below for the available conditions.\n    </p>\n    <nz-table [nzData]=\"[1]\" [nzShowPagination]=\"false\">\n      <thead>\n        <tr>\n          <th>Instruction</th>\n          <th>Description</th>\n          <th>Condition</th>\n          <th>Alternatives</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>JC</td>\n          <td>Jump if carry</td>\n          <td>Carry = TRUE</td>\n          <td>JB, JNAE</td>\n        </tr>\n        <tr>\n          <td>JNC</td>\n          <td>Jump if no carry</td>\n          <td>Carry = FALSE</td>\n          <td>JNB, JAE</td>\n        </tr>\n        <tr>\n          <td>JZ</td>\n          <td>Jump if zero</td>\n          <td>Zero = TRUE</td>\n          <td>JB, JE</td>\n        </tr>\n        <tr>\n          <td>JNZ</td>\n          <td>Jump if no zero</td>\n          <td>Zero = FALSE</td>\n          <td>JNE</td>\n        </tr>\n        <tr>\n          <td>JA</td>\n          <td>&gt;</td>\n          <td>Carry = FALSE && Zero = FALSE</td>\n          <td>JNBE</td>\n        </tr>\n        <tr>\n          <td>JNBE</td>\n          <td>not &lt;=</td>\n          <td>Carry = FALSE && Zero = FALSE</td>\n          <td>JA</td>\n        </tr>\n        <tr>\n          <td>JAE</td>\n          <td>&gt;=</td>\n          <td>Carry = FALSE</td>\n          <td>JNC, JNB</td>\n        </tr>\n        <tr>\n          <td>JNB</td>\n          <td>not &lt;</td>\n          <td>Carry = FALSE</td>\n          <td>JNC, JAE</td>\n        </tr>\n        <tr>\n          <td>JB</td>\n          <td>&lt;</td>\n          <td>Carry = TRUE</td>\n          <td>JC, JNAE</td>\n        </tr>\n        <tr>\n          <td>JNAE</td>\n          <td>not &gt;=</td>\n          <td>Carry = TRUE</td>\n          <td>JC, JB</td>\n        </tr>\n        <tr>\n          <td>JBE</td>\n          <td>&lt;=</td>\n          <td>C = TRUE or Z = TRUE</td>\n          <td>JNA</td>\n        </tr>\n        <tr>\n          <td>JNA</td>\n          <td>not &gt;</td>\n          <td>C = TRUE or Z = TRUE</td>\n          <td>JBE</td>\n        </tr>\n        <tr>\n          <td>JE</td>\n          <td>=</td>\n          <td>Z = TRUE</td>\n          <td>JZ</td>\n        </tr>\n        <tr>\n          <td>JNE</td>\n          <td>!=</td>\n          <td>Z = FALSE</td>\n          <td>JNZ</td>\n        </tr>\n      </tbody>\n    </nz-table>\n    <br />\n    <b>CALL - Function call</b>\n    <p>\n      Call can be used to jump into a subroutine (function). Pushes the\n      instruction address of the next instruction to the stack and jumps to the\n      specified address.\n    </p>\n    <pre>CALL address</pre>\n    <b>RET - Exit a subroutine</b>\n    <p>\n      Exits a subroutines by popping the return address previously pushed by the\n      CALL instruction. Make sure the SP is balanced before calling RET\n      otherwise the instruction pointer will have an ambiguous value.\n    </p>\n    <pre>RET</pre>\n    <h4 nz-typography>Stack instructions</h4>\n    <b>PUSH - Push to stack</b>\n    <p>\n      Pushes a value to the stack. The stack grows down and the current position\n      is available in the stack pointer register (SP). This instruction will\n      decrease the SP.\n    </p>\n    <pre>\nPUSH reg\nPUSH address\nPUSH constant</pre\n    >\n    <b>POP - Pop from stack</b>\n    <p>\n      Pops a value from the stack to a register. This instruction will increase\n      the SP.\n    </p>\n    <pre>POP reg</pre>\n    <h4 nz-typography>Other instructions</h4>\n    <b>HLT - Stops the processor.</b>\n    <p>\n      Stops operation of the processor. Hit Reset button to reset IP before\n      restarting.\n    </p>\n    <pre>HLT</pre>\n  </ng-container>\n</nz-drawer>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-instruction',\n  templateUrl: './instruction.component.html',\n  styleUrls: ['./instruction.component.less'],\n})\nexport class InstructionComponent {\n  visible = false;\n\n  open(): void {\n    this.visible = true;\n  }\n\n  close(): void {\n    this.visible = false;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'flag',\n})\nexport class FlagPipe implements PipeTransform {\n  transform(value: boolean): string {\n    return value.toString().toUpperCase();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { CpuService } from '../simulator/cpu.service';\n\n@Component({\n  selector: 'app-registers',\n  templateUrl: './registers.component.html',\n  styleUrls: ['./registers.component.less'],\n})\nexport class RegistersComponent {\n  @Input() displayHex = false;\n\n  constructor(public cpu: CpuService) {}\n}\n","<h4 nz-typography>Registers / Flags</h4>\n<nz-table [nzData]=\"[1]\" [nzNoResult]=\"null\" [nzShowPagination]=\"false\">\n  <thead>\n    <tr>\n      <th style=\"text-align: center\">A</th>\n      <th style=\"text-align: center\">B</th>\n      <th style=\"text-align: center\">C</th>\n      <th style=\"text-align: center\">D</th>\n      <th style=\"text-align: center\">IP</th>\n      <th style=\"text-align: center\">SP</th>\n      <th style=\"text-align: center\">Z</th>\n      <th style=\"text-align: center\">C</th>\n      <th style=\"text-align: center\">F</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr style=\"text-align: center\" class=\"source-code\">\n      <td>\n        <div ng-class=\"displayA && 'marker marker-a'\">\n          <small>{{ cpu.gpr[0] | numeral: displayHex }}</small>\n        </div>\n      </td>\n      <td>\n        <div ng-class=\"displayB && 'marker marker-b'\">\n          <small>{{ cpu.gpr[1] | numeral: displayHex }}</small>\n        </div>\n      </td>\n      <td>\n        <div ng-class=\"displayC && 'marker marker-c'\">\n          <small>{{ cpu.gpr[2] | numeral: displayHex }}</small>\n        </div>\n      </td>\n      <td>\n        <div ng-class=\"displayD && 'marker marker-d'\">\n          <small>{{ cpu.gpr[3] | numeral: displayHex }}</small>\n        </div>\n      </td>\n      <td>\n        <div class=\"marker marker-ip\">\n          <small>{{ cpu.ip | numeral: displayHex }}</small>\n        </div>\n      </td>\n      <td>\n        <div class=\"marker marker-sp\">\n          <small>{{ cpu.sp | numeral: displayHex }}</small>\n        </div>\n      </td>\n      <td>\n        <small>{{ cpu.zero | flag }}</small>\n      </td>\n      <td>\n        <small>{{ cpu.carry | flag }}</small>\n      </td>\n      <td>\n        <small>{{ cpu.fault | flag }}</small>\n      </td>\n    </tr>\n  </tbody>\n</nz-table>\n","import { Injectable } from '@angular/core';\nimport { MAX_SP, MIN_SP, OPCodes } from '../shared/constants';\nimport { MemoryService } from './memory.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CpuService {\n  gpr: [number, number, number, number];\n  ip: number;\n  sp: number;\n  zero: boolean;\n  carry: boolean;\n  fault: boolean;\n\n  constructor(private memory: MemoryService) {\n    this.reset();\n  }\n\n  /**\n   * reset the states,\n   * simulates the restart\n   */\n  reset() {\n    this.gpr = [0, 0, 0, 0];\n    this.sp = MAX_SP;\n\n    this.ip = 0;\n    this.zero = false;\n    this.carry = false;\n    this.fault = false;\n  }\n\n  /**\n   * On each CPU cycle, the next step is executed.\n   *\n   * Each step does only execute one single instruction.\n   */\n  step() {\n    if (this.fault) {\n      throw new Error('FAULT. Reset the CPU to continue.');\n    }\n\n    try {\n      if (this.ip < 0 || this.ip >= this.memory.data.length) {\n        throw new Error('Instruction pointer is outside of memory');\n      }\n      let regTo: number,\n        regFrom: number,\n        memFrom: number,\n        memTo: number,\n        num: number;\n\n      // load the instruction from memory at `this.ip` position\n      const instr = this.memory.load(this.ip) as OPCodes;\n      switch (instr) {\n        case OPCodes.NONE:\n          // noop operation, abort\n          return false;\n        case OPCodes.NOPE:\n          // do nothing\n          this.ip++;\n          break;\n        case OPCodes.MOV_REG_TO_REG:\n          // move the value from `regFrom` to `regTo`\n          // move regTo regFrom\n          regTo = this.checkGPR_SP(this.memory.load(++this.ip));\n          regFrom = this.checkGPR_SP(this.memory.load(++this.ip));\n          this.setGPR_SP(regTo, this.getGPR_SP(regFrom));\n          this.ip++;\n          break;\n\n        case OPCodes.MOV_ADDRESS_TO_REG:\n          // move the value from `memFrom` to `regTo`\n          // move regTo memFrom\n          regTo = this.checkGPR_SP(this.memory.load(++this.ip));\n          memFrom = this.memory.load(++this.ip);\n          this.setGPR_SP(regTo, this.memory.load(memFrom));\n          this.ip++;\n          break;\n\n        case OPCodes.MOV_REGADDRESS_TO_REG:\n          regTo = this.checkGPR_SP(this.memory.load(++this.ip));\n          regFrom = this.memory.load(++this.ip);\n          this.setGPR_SP(\n            regTo,\n            this.memory.load(this.indirectRegisterAddress(regFrom))\n          );\n          this.ip++;\n          break;\n        case OPCodes.MOV_REG_TO_ADDRESS:\n          memTo = this.memory.load(++this.ip);\n          regFrom = this.checkGPR_SP(this.memory.load(++this.ip));\n          this.memory.store(memTo, this.getGPR_SP(regFrom));\n          this.ip++;\n          break;\n        case OPCodes.MOV_REG_TO_REGADDRESS:\n          regTo = this.memory.load(++this.ip);\n          regFrom = this.checkGPR_SP(this.memory.load(++this.ip));\n          this.memory.store(\n            this.indirectRegisterAddress(regTo),\n            this.getGPR_SP(regFrom)\n          );\n          this.ip++;\n          break;\n        case OPCodes.MOV_NUMBER_TO_REG:\n          regTo = this.checkGPR_SP(this.memory.load(++this.ip));\n          num = this.memory.load(++this.ip);\n          this.setGPR_SP(regTo, num);\n          this.ip++;\n          break;\n        case OPCodes.MOV_NUMBER_TO_ADDRESS:\n          memTo = this.memory.load(++this.ip);\n          num = this.memory.load(++this.ip);\n          this.memory.store(memTo, num);\n          this.ip++;\n          break;\n        case OPCodes.MOV_NUMBER_TO_REGADDRESS:\n          regTo = this.memory.load(++this.ip);\n          num = this.memory.load(++this.ip);\n          this.memory.store(this.indirectRegisterAddress(regTo), num);\n          this.ip++;\n          break;\n        case OPCodes.ADD_REG_TO_REG:\n          regTo = this.checkGPR_SP(this.memory.load(++this.ip));\n          regFrom = this.checkGPR_SP(this.memory.load(++this.ip));\n          this.setGPR_SP(\n            regTo,\n            this.checkOperation(this.getGPR_SP(regTo) + this.getGPR_SP(regFrom))\n          );\n          this.ip++;\n          break;\n        case OPCodes.ADD_REGADDRESS_TO_REG:\n          regTo = this.checkGPR_SP(this.memory.load(++this.ip));\n          regFrom = this.memory.load(++this.ip);\n          this.setGPR_SP(\n            regTo,\n            this.checkOperation(\n              this.getGPR_SP(regTo) +\n                this.memory.load(this.indirectRegisterAddress(regFrom))\n            )\n          );\n          this.ip++;\n          break;\n        case OPCodes.ADD_ADDRESS_TO_REG:\n          regTo = this.checkGPR_SP(this.memory.load(++this.ip));\n          memFrom = this.memory.load(++this.ip);\n          this.setGPR_SP(\n            regTo,\n            this.checkOperation(\n              this.getGPR_SP(regTo) + this.memory.load(memFrom)\n            )\n          );\n          this.ip++;\n          break;\n        case OPCodes.ADD_NUMBER_TO_REG:\n          regTo = this.checkGPR_SP(this.memory.load(++this.ip));\n          num = this.memory.load(++this.ip);\n          this.setGPR_SP(\n            regTo,\n            this.checkOperation(this.getGPR_SP(regTo) + num)\n          );\n          this.ip++;\n          break;\n        case OPCodes.SUB_REG_FROM_REG:\n          regTo = this.checkGPR_SP(this.memory.load(++this.ip));\n          regFrom = this.checkGPR_SP(this.memory.load(++this.ip));\n          this.setGPR_SP(\n            regTo,\n            this.checkOperation(this.getGPR_SP(regTo) - this.gpr[regFrom])\n          );\n          this.ip++;\n          break;\n        case OPCodes.SUB_REGADDRESS_FROM_REG:\n          regTo = this.checkGPR_SP(this.memory.load(++this.ip));\n          regFrom = this.memory.load(++this.ip);\n          this.setGPR_SP(\n            regTo,\n            this.checkOperation(\n              this.getGPR_SP(regTo) -\n                this.memory.load(this.indirectRegisterAddress(regFrom))\n            )\n          );\n          this.ip++;\n          break;\n        case OPCodes.SUB_ADDRESS_FROM_REG:\n          regTo = this.checkGPR_SP(this.memory.load(++this.ip));\n          memFrom = this.memory.load(++this.ip);\n          this.setGPR_SP(\n            regTo,\n            this.checkOperation(\n              this.getGPR_SP(regTo) - this.memory.load(memFrom)\n            )\n          );\n          this.ip++;\n          break;\n        case OPCodes.SUB_NUMBER_FROM_REG:\n          regTo = this.checkGPR_SP(this.memory.load(++this.ip));\n          num = this.memory.load(++this.ip);\n          this.setGPR_SP(\n            regTo,\n            this.checkOperation(this.getGPR_SP(regTo) - num)\n          );\n          this.ip++;\n          break;\n        case OPCodes.INC_REG:\n          regTo = this.checkGPR_SP(this.memory.load(++this.ip));\n          this.setGPR_SP(regTo, this.checkOperation(this.getGPR_SP(regTo) + 1));\n          this.ip++;\n          break;\n        case OPCodes.DEC_REG:\n          regTo = this.checkGPR_SP(this.memory.load(++this.ip));\n          this.setGPR_SP(regTo, this.checkOperation(this.getGPR_SP(regTo) - 1));\n          this.ip++;\n          break;\n        case OPCodes.CMP_REG_WITH_REG:\n          regTo = this.checkGPR_SP(this.memory.load(++this.ip));\n          regFrom = this.checkGPR_SP(this.memory.load(++this.ip));\n          this.checkOperation(this.getGPR_SP(regTo) - this.getGPR_SP(regFrom));\n          this.ip++;\n          break;\n        case OPCodes.CMP_REGADDRESS_WITH_REG:\n          regTo = this.checkGPR_SP(this.memory.load(++this.ip));\n          regFrom = this.memory.load(++this.ip);\n          this.checkOperation(\n            this.getGPR_SP(regTo) -\n              this.memory.load(this.indirectRegisterAddress(regFrom))\n          );\n          this.ip++;\n          break;\n        case OPCodes.CMP_ADDRESS_WITH_REG:\n          regTo = this.checkGPR_SP(this.memory.load(++this.ip));\n          memFrom = this.memory.load(++this.ip);\n          this.checkOperation(\n            this.getGPR_SP(regTo) - this.memory.load(memFrom)\n          );\n          this.ip++;\n          break;\n        case OPCodes.CMP_NUMBER_WITH_REG:\n          regTo = this.checkGPR_SP(this.memory.load(++this.ip));\n          num = this.memory.load(++this.ip);\n          this.checkOperation(this.getGPR_SP(regTo) - num);\n          this.ip++;\n          break;\n        case OPCodes.JMP_REGADDRESS:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          this.jump(this.gpr[regTo]);\n          break;\n        case OPCodes.JMP_ADDRESS:\n          num = this.memory.load(++this.ip);\n          this.jump(num);\n          break;\n        case OPCodes.JC_REGADDRESS:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          if (this.carry) {\n            this.jump(this.gpr[regTo]);\n          } else {\n            this.ip++;\n          }\n          break;\n        case OPCodes.JC_ADDRESS:\n          num = this.memory.load(++this.ip);\n          if (this.carry) {\n            this.jump(num);\n          } else {\n            this.ip++;\n          }\n          break;\n        case OPCodes.JNC_REGADDRESS:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          if (!this.carry) {\n            this.jump(this.gpr[regTo]);\n          } else {\n            this.ip++;\n          }\n          break;\n        case OPCodes.JNC_ADDRESS:\n          num = this.memory.load(++this.ip);\n          if (!this.carry) {\n            this.jump(num);\n          } else {\n            this.ip++;\n          }\n          break;\n        case OPCodes.JZ_REGADDRESS:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          if (this.zero) {\n            this.jump(this.gpr[regTo]);\n          } else {\n            this.ip++;\n          }\n          break;\n        case OPCodes.JZ_ADDRESS:\n          num = this.memory.load(++this.ip);\n          if (this.zero) {\n            this.jump(num);\n          } else {\n            this.ip++;\n          }\n          break;\n        case OPCodes.JNZ_REGADDRESS:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          if (!this.zero) {\n            this.jump(this.gpr[regTo]);\n          } else {\n            this.ip++;\n          }\n          break;\n        case OPCodes.JNZ_ADDRESS:\n          num = this.memory.load(++this.ip);\n          if (!this.zero) {\n            this.jump(num);\n          } else {\n            this.ip++;\n          }\n          break;\n        case OPCodes.JA_REGADDRESS:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          if (!this.zero && !this.carry) {\n            this.jump(this.gpr[regTo]);\n          } else {\n            this.ip++;\n          }\n          break;\n        case OPCodes.JA_ADDRESS:\n          num = this.memory.load(++this.ip);\n          if (!this.zero && !this.carry) {\n            this.jump(num);\n          } else {\n            this.ip++;\n          }\n          break;\n        case OPCodes.JNA_REGADDRESS: // JNA REG\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          if (this.zero || this.carry) {\n            this.jump(this.gpr[regTo]);\n          } else {\n            this.ip++;\n          }\n          break;\n        case OPCodes.JNA_ADDRESS:\n          num = this.memory.load(++this.ip);\n          if (this.zero || this.carry) {\n            this.jump(num);\n          } else {\n            this.ip++;\n          }\n          break;\n        case OPCodes.PUSH_REG:\n          regFrom = this.checkGPR(this.memory.load(++this.ip));\n          this.push(this.gpr[regFrom]);\n          this.ip++;\n          break;\n        case OPCodes.PUSH_REGADDRESS:\n          regFrom = this.memory.load(++this.ip);\n          this.push(this.memory.load(this.indirectRegisterAddress(regFrom)));\n          this.ip++;\n          break;\n        case OPCodes.PUSH_ADDRESS:\n          memFrom = this.memory.load(++this.ip);\n          this.push(this.memory.load(memFrom));\n          this.ip++;\n          break;\n        case OPCodes.PUSH_NUMBER:\n          num = this.memory.load(++this.ip);\n          this.push(num);\n          this.ip++;\n          break;\n        case OPCodes.POP_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          this.gpr[regTo] = this.pop();\n          this.ip++;\n          break;\n        case OPCodes.CALL_REGADDRESS:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          this.push(this.ip + 1);\n          this.jump(this.gpr[regTo]);\n          break;\n        case OPCodes.CALL_ADDRESS:\n          num = this.memory.load(++this.ip);\n          this.push(this.ip + 1);\n          this.jump(num);\n          break;\n        case OPCodes.RET:\n          this.jump(this.pop());\n          break;\n        case OPCodes.MUL_REG: // A = A * REG\n          regFrom = this.checkGPR(this.memory.load(++this.ip));\n          this.gpr[0] = this.checkOperation(this.gpr[0] * this.gpr[regFrom]);\n          this.ip++;\n          break;\n        case OPCodes.MUL_REGADDRESS: // A = A * [REG]\n          regFrom = this.memory.load(++this.ip);\n          this.gpr[0] = this.checkOperation(\n            this.gpr[0] *\n              this.memory.load(this.indirectRegisterAddress(regFrom))\n          );\n          this.ip++;\n          break;\n        case OPCodes.MUL_ADDRESS: // A = A * [NUMBER]\n          memFrom = this.memory.load(++this.ip);\n          this.gpr[0] = this.checkOperation(\n            this.gpr[0] * this.memory.load(memFrom)\n          );\n          this.ip++;\n          break;\n        case OPCodes.MUL_NUMBER: // A = A * NUMBER\n          num = this.memory.load(++this.ip);\n          this.gpr[0] = this.checkOperation(this.gpr[0] * num);\n          this.ip++;\n          break;\n        case OPCodes.DIV_REG: // A = A / REG\n          regFrom = this.checkGPR(this.memory.load(++this.ip));\n          this.gpr[0] = this.checkOperation(this.division(this.gpr[regFrom]));\n          this.ip++;\n          break;\n        case OPCodes.DIV_REGADDRESS: // A = A / [REG]\n          regFrom = this.memory.load(++this.ip);\n          this.gpr[0] = this.checkOperation(\n            this.division(\n              this.memory.load(this.indirectRegisterAddress(regFrom))\n            )\n          );\n          this.ip++;\n          break;\n        case OPCodes.DIV_ADDRESS: // A = A / [NUMBER]\n          memFrom = this.memory.load(++this.ip);\n          this.gpr[0] = this.checkOperation(\n            this.division(this.memory.load(memFrom))\n          );\n          this.ip++;\n          break;\n        case OPCodes.DIV_NUMBER: // A = A / NUMBER\n          num = this.memory.load(++this.ip);\n          this.gpr[0] = this.checkOperation(this.division(num));\n          this.ip++;\n          break;\n        case OPCodes.AND_REG_WITH_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          regFrom = this.checkGPR(this.memory.load(++this.ip));\n          this.gpr[regTo] = this.checkOperation(\n            this.gpr[regTo] & this.gpr[regFrom]\n          );\n          this.ip++;\n          break;\n        case OPCodes.AND_REGADDRESS_WITH_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          regFrom = this.memory.load(++this.ip);\n          this.gpr[regTo] = this.checkOperation(\n            this.gpr[regTo] &\n              this.memory.load(this.indirectRegisterAddress(regFrom))\n          );\n          this.ip++;\n          break;\n        case OPCodes.AND_ADDRESS_WITH_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          memFrom = this.memory.load(++this.ip);\n          this.gpr[regTo] = this.checkOperation(\n            this.gpr[regTo] & this.memory.load(memFrom)\n          );\n          this.ip++;\n          break;\n        case OPCodes.AND_NUMBER_WITH_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          num = this.memory.load(++this.ip);\n          this.gpr[regTo] = this.checkOperation(this.gpr[regTo] & num);\n          this.ip++;\n          break;\n        case OPCodes.OR_REG_WITH_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          regFrom = this.checkGPR(this.memory.load(++this.ip));\n          this.gpr[regTo] = this.checkOperation(\n            this.gpr[regTo] | this.gpr[regFrom]\n          );\n          this.ip++;\n          break;\n        case OPCodes.OR_REGADDRESS_WITH_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          regFrom = this.memory.load(++this.ip);\n          this.gpr[regTo] = this.checkOperation(\n            this.gpr[regTo] |\n              this.memory.load(this.indirectRegisterAddress(regFrom))\n          );\n          this.ip++;\n          break;\n        case OPCodes.OR_ADDRESS_WITH_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          memFrom = this.memory.load(++this.ip);\n          this.gpr[regTo] = this.checkOperation(\n            this.gpr[regTo] | this.memory.load(memFrom)\n          );\n          this.ip++;\n          break;\n        case OPCodes.OR_NUMBER_WITH_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          num = this.memory.load(++this.ip);\n          this.gpr[regTo] = this.checkOperation(this.gpr[regTo] | num);\n          this.ip++;\n          break;\n        case OPCodes.XOR_REG_WITH_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          regFrom = this.checkGPR(this.memory.load(++this.ip));\n          this.gpr[regTo] = this.checkOperation(\n            this.gpr[regTo] ^ this.gpr[regFrom]\n          );\n          this.ip++;\n          break;\n        case OPCodes.XOR_REGADDRESS_WITH_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          regFrom = this.memory.load(++this.ip);\n          this.gpr[regTo] = this.checkOperation(\n            this.gpr[regTo] ^\n              this.memory.load(this.indirectRegisterAddress(regFrom))\n          );\n          this.ip++;\n          break;\n        case OPCodes.XOR_ADDRESS_WITH_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          memFrom = this.memory.load(++this.ip);\n          this.gpr[regTo] = this.checkOperation(\n            this.gpr[regTo] ^ this.memory.load(memFrom)\n          );\n          this.ip++;\n          break;\n        case OPCodes.XOR_NUMBER_WITH_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          num = this.memory.load(++this.ip);\n          this.gpr[regTo] = this.checkOperation(this.gpr[regTo] ^ num);\n          this.ip++;\n          break;\n        case OPCodes.NOT_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          this.gpr[regTo] = this.checkOperation(~this.gpr[regTo]);\n          this.ip++;\n          break;\n        case OPCodes.SHL_REG_WITH_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          regFrom = this.checkGPR(this.memory.load(++this.ip));\n          this.gpr[regTo] = this.checkOperation(\n            this.gpr[regTo] << this.gpr[regFrom]\n          );\n          this.ip++;\n          break;\n        case OPCodes.SHL_REGADDRESS_WITH_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          regFrom = this.memory.load(++this.ip);\n          this.gpr[regTo] = this.checkOperation(\n            this.gpr[regTo] <<\n              this.memory.load(this.indirectRegisterAddress(regFrom))\n          );\n          this.ip++;\n          break;\n        case OPCodes.SHL_ADDRESS_WITH_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          memFrom = this.memory.load(++this.ip);\n          this.gpr[regTo] = this.checkOperation(\n            this.gpr[regTo] << this.memory.load(memFrom)\n          );\n          this.ip++;\n          break;\n        case OPCodes.SHL_NUMBER_WITH_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          num = this.memory.load(++this.ip);\n          this.gpr[regTo] = this.checkOperation(this.gpr[regTo] << num);\n          this.ip++;\n          break;\n        case OPCodes.SHR_REG_WITH_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          regFrom = this.checkGPR(this.memory.load(++this.ip));\n          this.gpr[regTo] = this.checkOperation(\n            this.gpr[regTo] >>> this.gpr[regFrom]\n          );\n          this.ip++;\n          break;\n        case OPCodes.SHR_REGADDRESS_WITH_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          regFrom = this.memory.load(++this.ip);\n          this.gpr[regTo] = this.checkOperation(\n            this.gpr[regTo] >>>\n              this.memory.load(this.indirectRegisterAddress(regFrom))\n          );\n          this.ip++;\n          break;\n        case OPCodes.SHR_ADDRESS_WITH_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          memFrom = this.memory.load(++this.ip);\n          this.gpr[regTo] = this.checkOperation(\n            this.gpr[regTo] >>> this.memory.load(memFrom)\n          );\n          this.ip++;\n          break;\n        case OPCodes.SHR_NUMBER_WITH_REG:\n          regTo = this.checkGPR(this.memory.load(++this.ip));\n          num = this.memory.load(++this.ip);\n          this.gpr[regTo] = this.checkOperation(this.gpr[regTo] >>> num);\n          this.ip++;\n          break;\n        default:\n          break;\n      }\n      return true;\n    } catch (error) {\n      this.fault = true;\n      throw error;\n    }\n  }\n\n  /**\n   * ensure the register index valid\n   * @param regIndex\n   * @returns\n   */\n  private checkGPR(regIndex: number) {\n    if (regIndex < 0 || regIndex >= this.gpr.length) {\n      throw new Error(`Invalid register index: ${regIndex}`);\n    }\n\n    return regIndex;\n  }\n\n  /**\n   * ensure the register index valid\n   * @param regIndex\n   * @returns\n   */\n  private checkGPR_SP(regIndex: number) {\n    if (regIndex < 0 || regIndex >= this.gpr.length + 1) {\n      throw new Error(`Invalid register index: ${regIndex}`);\n    }\n\n    return regIndex;\n  }\n\n  private setGPR_SP(reg: number, value: number) {\n    if (reg >= 0 && reg < this.gpr.length) {\n      this.gpr[reg] = value;\n      return;\n    }\n\n    if (reg === this.gpr.length) {\n      this.sp = value;\n      // Not likely to happen, since we always get here after checkOpertion().\n      if (this.sp < MIN_SP) {\n        throw new Error('Stack overflow');\n      }\n\n      if (this.sp > MAX_SP) {\n        throw new Error('Stack underflow');\n      }\n\n      return;\n    }\n\n    throw new Error(`Invalid register: ${reg};`);\n  }\n\n  private getGPR_SP(reg: number) {\n    if (reg >= 0 && reg < this.gpr.length) {\n      return this.gpr[reg];\n    }\n\n    if (reg === this.gpr.length) {\n      return this.sp;\n    }\n\n    throw new Error(`Invalid register: ${reg};`);\n  }\n\n  private indirectRegisterAddress(value: number) {\n    const reg = value % 8;\n\n    let base: number;\n    if (reg < this.gpr.length) {\n      base = this.gpr[reg];\n    } else {\n      base = this.sp;\n    }\n\n    let offset = Math.floor(value / 8);\n    if (offset > 15) {\n      offset = offset - 32;\n    }\n\n    return base + offset;\n  }\n\n  private checkOperation(value: number) {\n    let zero = false;\n    let carry = false;\n\n    if (value >= 256) {\n      carry = true;\n      value = value % 256;\n    } else if (value === 0) {\n      zero = true;\n    } else if (value < 0) {\n      carry = true;\n      value = 255 - (-value % 256);\n    }\n    this.carry = carry;\n    this.zero = zero;\n    return value;\n  }\n\n  private jump(newIP: number) {\n    this.memory.checkAddress(newIP);\n\n    this.ip = newIP;\n  }\n\n  private push(value: number) {\n    this.memory.store(this.sp--, value);\n    if (this.sp < MIN_SP) {\n      throw new Error('Stack overflow');\n    }\n  }\n\n  private pop(): number {\n    const value = this.memory.load(++this.sp);\n    if (this.sp > MAX_SP) {\n      throw new Error('Stack underflow');\n    }\n    return value;\n  }\n\n  private division(divisor: number) {\n    if (divisor === 0) {\n      throw new Error('Division by 0');\n    }\n    return Math.floor(this.gpr[0] / divisor);\n  }\n}\n","/**\n *  Use https://www.debuggex.com/\n *  Matches: \"label: INSTRUCTION ([\"')OPERAND1(]\"'), ([\"')OPERAND2(]\"')\n *  GROUPS:      1       2               3                    7\n */\nexport const REGEX =\n  /^[\\t ]*(?:([.A-Za-z]\\w*)[:])?(?:[\\t ]*([A-Za-z]{2,4})(?:[\\t ]+(\\[(\\w+((\\+|-)\\d+)?)\\]|\\\".+?\\\"|\\'.+?\\'|[.A-Za-z0-9]\\w*)(?:[\\t ]*[,][\\t ]*(\\[(\\w+((\\+|-)\\d+)?)\\]|\\\".+?\\\"|\\'.+?\\'|[.A-Za-z0-9]\\w*))?)?)?/;\n\n// MATCHES: \"(+|-)INTEGER\"\nexport const RegexNum = /^[-+]?[0-9]+$/;\n// MATCHES: \"(.L)abel\"\nexport const RegexLabel = /^[.A-Za-z]\\w*$/;\n\nexport const MIN_SP = 0;\n\nexport const MAX_SP = 231;\n\nexport const OUTPUT_START_INDEX = 232;\n\nexport enum OPCodes {\n  NONE = 0,\n  NOPE = 1,\n  MOV_REG_TO_REG = 2,\n  MOV_ADDRESS_TO_REG = 3,\n  MOV_REGADDRESS_TO_REG = 4,\n  MOV_REG_TO_ADDRESS = 5,\n  MOV_REG_TO_REGADDRESS = 6,\n  MOV_NUMBER_TO_REG = 7,\n  MOV_NUMBER_TO_ADDRESS = 8,\n  MOV_NUMBER_TO_REGADDRESS = 9,\n  ADD_REG_TO_REG = 10,\n  ADD_REGADDRESS_TO_REG = 11,\n  ADD_ADDRESS_TO_REG = 12,\n  ADD_NUMBER_TO_REG = 13,\n  SUB_REG_FROM_REG = 14,\n  SUB_REGADDRESS_FROM_REG = 15,\n  SUB_ADDRESS_FROM_REG = 16,\n  SUB_NUMBER_FROM_REG = 17,\n  INC_REG = 18,\n  DEC_REG = 19,\n  CMP_REG_WITH_REG = 20,\n  CMP_REGADDRESS_WITH_REG = 21,\n  CMP_ADDRESS_WITH_REG = 22,\n  CMP_NUMBER_WITH_REG = 23,\n  JMP_REGADDRESS = 30,\n  JMP_ADDRESS = 31,\n  JC_REGADDRESS = 32,\n  JC_ADDRESS = 33,\n  JNC_REGADDRESS = 34,\n  JNC_ADDRESS = 35,\n  JZ_REGADDRESS = 36,\n  JZ_ADDRESS = 37,\n  JNZ_REGADDRESS = 38,\n  JNZ_ADDRESS = 39,\n  JA_REGADDRESS = 40,\n  JA_ADDRESS = 41,\n  JNA_REGADDRESS = 42,\n  JNA_ADDRESS = 43,\n  PUSH_REG = 50,\n  PUSH_REGADDRESS = 51,\n  PUSH_ADDRESS = 52,\n  PUSH_NUMBER = 53,\n  POP_REG = 54,\n  CALL_REGADDRESS = 55,\n  CALL_ADDRESS = 56,\n  RET = 57,\n  MUL_REG = 60,\n  MUL_REGADDRESS = 61,\n  MUL_ADDRESS = 62,\n  MUL_NUMBER = 63,\n  DIV_REG = 64,\n  DIV_REGADDRESS = 65,\n  DIV_ADDRESS = 66,\n  DIV_NUMBER = 67,\n  AND_REG_WITH_REG = 70,\n  AND_REGADDRESS_WITH_REG = 71,\n  AND_ADDRESS_WITH_REG = 72,\n  AND_NUMBER_WITH_REG = 73,\n  OR_REG_WITH_REG = 74,\n  OR_REGADDRESS_WITH_REG = 75,\n  OR_ADDRESS_WITH_REG = 76,\n  OR_NUMBER_WITH_REG = 77,\n  XOR_REG_WITH_REG = 78,\n  XOR_REGADDRESS_WITH_REG = 79,\n  XOR_ADDRESS_WITH_REG = 80,\n  XOR_NUMBER_WITH_REG = 81,\n  NOT_REG = 82,\n  SHL_REG_WITH_REG = 90,\n  SHL_REGADDRESS_WITH_REG = 91,\n  SHL_ADDRESS_WITH_REG = 92,\n  SHL_NUMBER_WITH_REG = 93,\n  SHR_REG_WITH_REG = 94,\n  SHR_REGADDRESS_WITH_REG = 95,\n  SHR_ADDRESS_WITH_REG = 96,\n  SHR_NUMBER_WITH_REG = 97,\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OUTPUT_START_INDEX } from '../shared/constants';\nimport { MemoryService } from '../simulator/memory.service';\n\n@Component({\n  selector: 'app-output',\n  templateUrl: './output.component.html',\n  styleUrls: ['./output.component.less'],\n})\nexport class OutputComponent implements OnInit, OnDestroy {\n  output$: Subscription;\n  data: number[];\n  outputStartIndex = OUTPUT_START_INDEX;\n\n  constructor(private memory: MemoryService) {}\n  ngOnDestroy(): void {\n    this.output$?.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.output$ = this.memory.output$\n      .pipe(tap((v) => void (this.data = v)))\n      .subscribe();\n  }\n}\n","<div class=\"source-code output\">\n  <ng-container *ngFor=\"let m of data\">\n    <span class=\"char\">{{ m | getChar }}</span>\n  </ng-container>\n</div>\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => void console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}